import numpy as np

def gauss_elimination(A, b):
    """
    Solves the system of linear equations Ax = b using Gauss elimination.
    
    Parameters:
    A : numpy array (n x n) - coefficient matrix
    b : numpy array (n x 1) - right-hand side vector
    
    Returns:
    x : numpy array (n x 1) - solution vector
    """
    n = len(b)
    
    # Combine A and b into augmented matrix
    Ab = np.hstack([A, b.reshape(-1, 1)])
    
    # Forward elimination
    for i in range(n):
        # Partial pivoting: find row with maximum element in current column
        max_row = i + np.argmax(np.abs(Ab[i:, i]))
        Ab[[i, max_row]] = Ab[[max_row, i]]  # Swap rows
        
        # Make sure the pivot is not zero (matrix is singular)
        if np.abs(Ab[i, i]) < 1e-10:
            raise ValueError("Matrix is singular or nearly singular")
            
        # Eliminate below
        for j in range(i + 1, n):
            factor = Ab[j, i] / Ab[i, i]
            Ab[j, i:] -= factor * Ab[i, i:]
    
    # Back substitution
    x = np.zeros(n)
    for i in range(n-1, -1, -1):
        x[i] = (Ab[i, -1] - np.dot(Ab[i, i+1:n], x[i+1:n])) / Ab[i, i]
    
    return x

# Example usage
if __name__ == "__main__":
    # Example system:
    # 2x + y - z = 8
    # -3x - y + 2z = -11
    # -2x + y + 2z = -3
    
    A = np.array([[2, 1, -1],
                  [-3, -1, 2],
                  [-2, 1, 2]], dtype=float)
    
    b = np.array([8, -11, -3], dtype=float)
    
    try:
        solution = gauss_elimination(A, b)
        print("Solution:", solution)
    except ValueError as e:
        print("Error:", e)
